def awsRegion            = 'eu-central-1'
def err                  = null
def repoServiceName      = 'github.com'
def repoName             = "git@${repoServiceName}:testcivgs/infrastructure.git"
currentBuild.result      = "SUCCESS"
currentBuild.description = ""
def slackTeam            = 'connected.express'

// To use slack notifications install Jenkins CI Slack App
// https://{{ SLACK_TEAM }}.slack.com/apps/A0F7VRFKN-jenkins-ci
def buildNotify(slackTeam, buildStatus, subject) {
    // build status of null means successful
    buildStatus =  buildStatus ?: 'SUCCESS'

    // Default values
    def colorCode = 'warning'
    def summary = "${subject} (<${env.BUILD_URL}|Open>)"

    // Override default values based on build status
    if (buildStatus == 'STARTED') {
      colorCode = 'warning'
    } else if (buildStatus == 'SUCCESS') {
      colorCode = 'good'
    } else {
      colorCode = 'danger'
    }

    // Send notifications
    slackSend color: colorCode,
              message: summary,
              teamDomain: "${slackTeam}",
              channel: '#jenkins',
              tokenCredentialId: 'slack-token'
}

node {
    properties([
        [$class: 'BuildBlockerProperty',
            blockLevel: 'GLOBAL',
            blockingJobs: '^deploy-service$',
            scanQueueFor: 'DISABLE',
            useBuildBlocker: true],
        pipelineTriggers([]),
        parameters([
            choice(
                choices: '''frontend''',
                description: '',
                name: 'SERVICE_NAME'),
            choice(
                choices: '''dev
prod''',
                description: '',
                name: 'ENVIRONMENT'),
            booleanParam(
                defaultValue: true,
                description: 'Whether to check service status after deployment.',
                name: 'CHECK_SERVICE'),
            string(
                defaultValue: '',
                description: '',
                name: 'SERVICE_DOCKER_TAG')
        ]),
    ])

    try {
        // skip first build
        if ( currentBuild.number == 1 ) {
            echo "Skipping first build."
            return
        }
        stage("Get Source") {
            checkout([
                $class: 'GitSCM',
                branches: [[name: '*/master']],
                doGenerateSubmoduleConfigurations: false,
                extensions: [[$class: 'CleanBeforeCheckout']],
                submoduleCfg: [],
                userRemoteConfigs: [[url: "${repoName}", credentialsId: 'infra-key']]
            ])

            buildNotify "${slackTeam}", 'STARTED', "[STARTED] Updating service on ${params.ENVIRONMENT}: ${params.SERVICE_NAME} to ${params.SERVICE_DOCKER_TAG}"
            currentBuild.description = "Update service on ${params.ENVIRONMENT}: ${params.SERVICE_NAME} to ${params.SERVICE_DOCKER_TAG}"
        }

        stage("Deploy App") {
            if (params.CHECK_SERVICE) {
                withEnv(["SERVICE_NAME=${params.SERVICE_NAME}",
                         "SERVICE_DOCKER_TAG=${params.SERVICE_DOCKER_TAG}",
                         "AWS_REGION=${awsRegion}",
                         "AWS_DEFAULT_REGION=${awsRegion}",
                         "ENVIRONMENT=${params.ENVIRONMENT}"]) {
                    sh "./jenkins/deploy-service/update-service.sh --name $SERVICE_NAME --tag $SERVICE_DOCKER_TAG --env $ENVIRONMENT"
                }
            } else {
                withEnv(["SERVICE_NAME=${params.SERVICE_NAME}",
                         "SERVICE_DOCKER_TAG=${params.SERVICE_DOCKER_TAG}",
                         "AWS_REGION=${awsRegion}",
                         "AWS_DEFAULT_REGION=${awsRegion}",
                         "ENVIRONMENT=${params.ENVIRONMENT}"]) {
                    sh "./jenkins/deploy-service/update-service.sh --name $SERVICE_NAME --tag $SERVICE_DOCKER_TAG --env $ENVIRONMENT --skip-service-check"
                }
            }
        }
    }
    catch (caughtError) {
        currentBuild.result = "FAILURE"
        throw caughtError
    }
    finally {
        buildNotify "${slackTeam}", "${currentBuild.result}", "[${currentBuild.result}] Updating ${params.SERVICE_NAME} on ${params.ENVIRONMENT} to ${params.SERVICE_DOCKER_TAG}"
    }
}
